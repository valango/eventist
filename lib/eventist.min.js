/*!
 Eventist: event emitter for modular designs.
 */
!function(t){"use strict";function e(){return this instanceof e?(this._events={},void(this._depth=0)):new e}var n="function",i="string",r="object",o=void 0,s="_eventistMark",u="_eventistOnce",f=Array.prototype.slice,h={},c=function(t,e){throw new TypeError(["Eventist#",e,": ",t].join(""))},a=function(t,e){n!==typeof t&&c("A callable argument is expected!",e)},l=function(t,e){i!==typeof t&&c("Event type must be string!",e)},p=e.prototype;p.execute=function(t,e){return t.apply(this,e)},p.on=function(t,e){var n,i=this._events,r="on";return l(t,r),a(e,r),(n=i[t])!==o?n.push(e):i[t]=[e],this},p.once=function(t,e){var n="once";l(t,n),a(e,n);var i=this,r=function(){var n=e.apply(i,arguments);return i.off(t,r),n};return r[s]=h,r[u]=e,this.on(t,r)},p.off=function(t,e){var n,i,r,f=this._events;if(l(t,"off"),(n=f[t])!==o){if(e===!0)return delete f[t],this;for(i=n.length;--i>=0;)((r=n[i])===e||r[s]===h&&r[u]===e)&&(n.splice(i,1),n.length===(i=0)&&delete f[t])}return this},p.emit=function(t){var e,n,i,r,s=o;if(n=f.call(arguments),n.shift(1),(e=this._events[t])!==o){e=e.slice(),i=this.execute.bind(this),r=e.length,this._depth+=1;try{do s=i(e[--r],n,t);while(s===o&&r>0)}catch(u){throw this._depth-=1,u}this._depth-=1}return s},p.send=function(t){var e=this,i=f.call(arguments);return n===typeof t?i.shift(1):t=null,setTimeout(function(){var n,r=null;try{n=e.emit.apply(e,i)}catch(o){if(!t)throw o;r=o}t&&t(r,n,i)},0),e},p.depth=function(){return this._depth},p.info=function(){var t,e={},n=this._events;for(t in n)e[t]=n[t].length;return e},t=t||this,n===typeof define&&define.amd&&r===typeof define.amd?define(function(){return e}):r===typeof module&&module.exports?module.exports=e:t.Eventist=e}.call(this);